##https://github.com/actions/cache
###https://github.com/marketplace/actions/setup-github-cli
### https://github.com/sersoft-gmbh/setup-gh-cli-action
##Retriggering to run a chcek on the cache_if the job will skipp or not
name: kakeh
on: push

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-node-modules.outputs.cache-hit }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Add caching
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Cache Node.js modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Show Cache Status
        run: |
          echo "Cache hit: ${{ steps.cache-node-modules.outputs.cache-hit }}"
      #   # - name: Cache dependencies
      #       id: cache
      #       uses: actions/cache@v3
      #       with:
      #         path: node_modules
      #         key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci  --loglevel verbose
      - name: Test code
        run: npm run test
      - name: Build project 
        run: npm run build  --loglevel verbose
  checkout:
    name: Checkout code
    needs: test
    if: needs.test.outputs.cache-hit != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Output event data
        run: echo "${{ toJSON(github.event) }}" ### This step outputs the event data
      - name: Get code
        uses: actions/checkout@v3
  install:
    name: Install Dependencies
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3 ##T get list of all the actions https://github.com/actions/cache
        with:
          path: node_modules ##This is the path to cache the npm dependencies, the dependencies are stored in the ~/.npm directory
          key: depend-node-modules-${{hashFiles('**/package-lock.json')}} ### This is the key for the cache, it is based on the hash of the package-lock.json file, if the file changes, the cache is discarded and a new cache is created
          ###key also, suggest if the ache should be discarded or not, if the key changes, the cache is discarded and a new cache is createdhence give the name of cache that dinamic and can change as cache is discarded if the key changes
          ## hash files is used to create a unique key for the cache, if the package-lock.json file changes, the cache is discarded and a new cache is created and we are not using the old cache stored in the ~/.npm directory
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
  chcekin:
    name: Run Tests
    needs: install
    if: needs.install.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        if: needs.test.outputs.cache-hit != 'true'
        run: npm install  --loglevel verbose
      - name: Install Vitest
        if: needs.test.outputs.cache-hit != 'true'
        run: npm install --save-dev vitest ## Install Vitest for testing
      - name: Run unit tests
        if: needs.test.outputs.cache-hit != 'true'
        run: npm run test  --loglevel verbose

  #clear:
  #  runs-on: ubuntu-latest
  #  needs: install
  #  if: always()
  #  permissions:
  #    actions: write
  #  steps:
  #    - uses: sersoft-gmbh/setup-gh-cli-action@v2
  #    ### https://github.com/sersoft-gmbh/setup-gh-cli-action
  #    - name: Delete branchâ€‘specific caches
  #      env:
  #        GH_TOKEN: ${{ github.token }} # Must have repo scope
  #      run: |
  #        echo "Fetching cache IDs for branch: ${{ github.ref_name }}"
  #        CACHE_IDS=$(gh cache list \
  #          --repo "${{ github.repository }}" \
  #          --ref "refs/heads/${{ github.ref_name }}" \
  #          --limit 100 --json id --jq '.[].id')
  #        echo "Deleting caches with IDs: $CACHE_IDS"
#
  #        if [ -z "$CACHE_IDS" ]; then
  #          echo "No caches found for branch: ${{ github.ref_name }}"
  #        else
  #          echo "Found cache Ids:"
  #          echo "$CACHE_IDS"
  #          echo "$CACHE_IDS" | while read cacheId; do
  #            echo "Deleting cache ID $cacheId"
  #            gh cache delete "$cacheId" --repo "${{ github.repository }}"
  #          done
  #        fi
  report:
    runs-on: ubuntu-latest
    needs: [ install, chcekin ]
    if: failure()
    steps:
      - name: Output infroamtion
        run: |
          echo "something went wrong"
          echo "${{toJSON(github)}}"
      - name: Summary
        run: |
          echo "Cache hit in test: ${{ needs.test.outputs.cache-hit }}"

##https://docs.github.com/en/actions/concepts/workflows-and-actions/contexts
##https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#using-a-specific-shell%5C
##Artifacts are temporary (default: 90 days storage).
##Path consistency matters: If you upload dist/, it downloads to ./dist/.
##Output variables (script-file) are for small metadata (not large files).
##Output jobs can be created and refrence only if declared at top also, here as we will get random file names in dist/assets directory, we will use the output variable to get the script file name
##https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs
##https://docs.github.com/en/actions/reference/contexts-reference
name: deploy Pipeline
on:
  ##push:
  ##  branches:
  ##    - master
  ##    - main
  workflow_run:
    workflows: [Test]
    types: ["completed"]
jobs:
  checkout:
    name: Checkout code
    runs-on: ubuntu-latest
    steps:
      - name: Output event data
        run: echo "${{ toJSON(github.event) }}" ### This step outputs the event data
      - name: Get code
        uses: actions/checkout@v3
  setup:
    name: Setup Environment
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
  install:
    name: Install Dependencies
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm ci

  test:
    name: Run Tests
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm install
      - name: Install Vitest
        run: npm install --save-dev vitest ## Install Vitest for testing
      - name: Run unit tests
        run: npm run test

  build:
    name: Build App
    needs: test
    runs-on: ubuntu-latest
    outputs:
      scriptfile: ${{ steps.publish.outputs.scriptfile }} #### Define an output variable to be used in the deploy job, ##https://docs.github.com/en/actions/reference/contexts-reference  ##jobs.<job_id>.outputs.<output_id>
    steps: ##jobs.<job_id>.outputs.<output_id>
      - uses: actions/checkout@v3
      - name: Install Vitest
        run: npm install --save-dev vitest ## install Vitest for testing, if not already installed
      - name: Build Project
        run: npm run build
      - name: Find scriptfile
        id: publish
        run: |
          file=$(find dist/assets -type f -name "*.js" | head -n 1) 
          echo "scriptfile=$file" >> $GITHUB_OUTPUT

  package:
    name: Package App
    needs: build
    runs-on: ubuntu-latest
    outputs:
      jshide: ${{ steps.call.outputs.dante }} 
    steps:
      - run: echo "Packaging build artifacts..."
      - uses: actions/checkout@v3
      - name: Install Vitest
        run: npm install --save-dev vitest ## Install Vitest for testing  
      - name: Build Project  
        run: npm run build ## Build the project
      - name: catchjs
        id: call
        run: find dist/assets/*.js -type f -execdir echo 'dante={}'>> $GITHUB_OUTPUT ';'


  upload-artifacts:
    name: Upload Artifacts
    needs: package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Vitest
        run: npm install --save-dev vitest
      - name: Build Project
        run: npm run build
      - name: Verify dist directory
        run: |
          echo "Verifying current working directory..."
          ls -la 
          echo "Verifying dist directory  contents"
          ls -la ./dist/
          echo "Verifying current working directory..."
          pwd
          echo "Verifying directory contents"
          ls -la
          echo "Build dist directory contents:"
          ls -la ./dist/
          echo "Checking index.html file if it exists...."
          if [ ! -f dist/index.html ]; then 
            echo "Warning: index.html file is missing in dist directory!!"
            exit 1
          fi
          if [ ! -f dist/index.html ]; then
            echo "ERROR: index.html file is missing in dist/assets directory!!"
            exit 1
          fi
          if [ ! -f dist/assets/*.png ]; then
            echo "ERROR: image file is missing in dist/assets directory!!"
            exit 1
          fi
          if ! ls dist/assets/*.js 1> /dev/null 2>&1; then
            echo "ERROR: No JavaScript files found in dist/assets directory!!"
            exit 1
          fi
          if ! ls dist/assets/*.css 1> /dev/null 2>&1; then
            echo "ERROR: No CSS files found in dist/assets directory!!"
            exit 1
          fi
          echo "Complete dist directory list"
          ls -R ./dist
      - uses: actions/upload-artifact@v4 ## Upload the build artifacts
        with: ##specify the artifact name and path to upload
          name: build-artifacts ## name for retriving the artifacts, can also use multiple names
          path: |
            ./dist 
            ./dist/assets/  
            !assets/**/*

  deploy-staging:
    name: Deploy to Staging
    needs: upload-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Deploying to staging
        run: echo "Deploying to staging..."
      - name: Download upload-artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts ## name for retriving the artifacts, can also use multiple names
          path: ./dist ## path to download the artifacts to
      - name: Verify downloaded artifacts
        run: |
          echo "Verifying current working directory..."
          pwd
          echo "Verifying downloaded artifacts contents"
          ls -la ./dist/
          echo "Checking index.html file if it exists...."
          if [ ! -f dist/index.html ]; then 
            echo "Warning: index.html file is missing in dist directory!!"
            exit 1
          fi
          if [ ! -f dist/index.html ]; then
            echo "ERROR: index.html file is missing in dist/assets directory!!"
            exit 1
          fi
          if [ ! -f dist/assets/*.png ]; then
            echo "ERROR: image file is missing in dist/assets directory!!"
            exit 1
          fi
          if ! ls dist/assets/*.js 1> /dev/null 2>&1; then
            echo "ERROR: No JavaScript files found in dist/assets directory!!"
            exit 1
          fi
          if ! ls dist/assets/*.css 1> /dev/null 2>&1; then
            echo "ERROR: No CSS files found in dist/assets directory!!"
            exit 1
          fi
          echo "Complete dist directory list"
          ls -R ./dist

      - name: Output file list
        run: ls -R ./dist ##verify the contents of the dist directory iirespective of the branch

  approval:
    name: Await Manual Approval
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-site.com
    steps:
      - name: Wait for approval
        run: echo "Waiting for manual approval..."
      - name: Output Filename
        run: echo "The script file is ${{ needs.call.outputs.dante }}" ## calls dante

  deploy-prod:
    name: Deploy to Production
    needs: 
       - approval  
       - build
    runs-on: ubuntu-latest
    steps:
      - name: Use output ## Use the output from the build job
        run: echo "The actual script file is ${{ needs.build.outputs.scriptfile }}"
      - name: Deploy to production
        run: echo "Deploying to production..."
